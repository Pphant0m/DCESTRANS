import os
import csv
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "123456789"))  # ‚Üê –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π ID

# === –°—Ç–∞–Ω–∏ ===
(
    CHOOSING, DATE, CITY, POST_OFFICE, FULL_NAME,
    PHONE, PARCEL_NUMBER, PACKAGE_COUNT, PACKAGE_TYPE
) = range(9)

MAIN_MENU = ReplyKeyboardMarkup(
    [["–í–Ω–µ—Å—Ç–∏ –¥–∞–Ω—ñ"]],
    resize_keyboard=True
)

# === –û–±—Ä–æ–±–Ω–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=MAIN_MENU)
    return CHOOSING

async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–í–Ω–µ—Å—Ç–∏ –¥–∞–Ω—ñ":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—ó–∑–¥–∫–∏ (–Ω–∞–ø—Ä. 2025-04-30):")
        return DATE
    await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    return CHOOSING

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['date'] = update.message.text.strip()
    await update.message.reply_text("–ú—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏:")
    return CITY

async def get_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['city'] = update.message.text
    await update.message.reply_text("–ù–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:")
    return POST_OFFICE

async def get_post_office(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['post_office'] = update.message.text
    await update.message.reply_text("–ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:")
    return FULL_NAME

async def get_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['full_name'] = update.message.text
    await update.message.reply_text("–ú–æ–±—ñ–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("–ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä –ø–æ—Å–∏–ª–∫–∏:")
    return PARCEL_NUMBER

async def get_parcel_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['parcel_number'] = update.message.text
    await update.message.reply_text("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å:")
    return PACKAGE_COUNT

async def get_package_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['package_count'] = update.message.text
    await update.message.reply_text("–¢–∏–ø –ø–∞–∫—É–≤–∞–Ω–Ω—è (–º—ñ—à–æ–∫, –∫–æ—Ä–æ–±–∫–∞, —ñ–Ω—à–µ):")
    return PACKAGE_TYPE

async def get_package_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['package_type'] = update.message.text

    # === –§–æ—Ä–º—É—î–º–æ —ñ–º‚Äô—è —Ñ–∞–π–ª—É –ø–æ –¥–∞—Ç—ñ –ø–æ—ó–∑–¥–∫–∏ ===
    trip_date = context.user_data['date']
    filename = f"{trip_date}.csv"

    # === –ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ñ–∞–π–ª –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ ===
    file_exists = os.path.exists(filename)
    with open(filename, mode='a', encoding='utf-8', newline='') as file:
        writer = csv.writer(file)
        if not file_exists:
            writer.writerow([
                "–î–∞—Ç–∞ –ø–æ—ó–∑–¥–∫–∏", "–ú—ñ—Å—Ç–æ", "–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", "–ü–Ü–ë",
                "–¢–µ–ª–µ—Ñ–æ–Ω", "–ù–æ–º–µ—Ä –ø–æ—Å–∏–ª–∫–∏", "–ö-—Å—Ç—å –º—ñ—Å—Ü—å",
                "–ü–∞–∫—É–≤–∞–Ω–Ω—è", "–î–∞—Ç–∞ –∑–∞–ø–∏—Å—É"
            ])
        writer.writerow([
            context.user_data['date'],
            context.user_data['city'],
            context.user_data['post_office'],
            context.user_data['full_name'],
            context.user_data['phone'],
            context.user_data['parcel_number'],
            context.user_data['package_count'],
            context.user_data['package_type'],
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ])

    await update.message.reply_text("‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ç–∞–±–ª–∏—Ü—é.")
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=MAIN_MENU)

    # === –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∞–¥–º—ñ–Ω—É ===
    await context.bot.send_document(
        chat_id=ADMIN_CHAT_ID,
        document=open(filename, "rb"),
        caption=f"üì¶ –î–∞–Ω—ñ –ø–æ —Ä–µ–π—Å—É {trip_date}"
    )

    return CHOOSING

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_action)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_city)],
            POST_OFFICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_post_office)],
            FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_full_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            PARCEL_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_parcel_number)],
            PACKAGE_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_package_count)],
            PACKAGE_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_package_type)],
        },
        fallbacks=[]
    )

    app.add_handler(conv_handler)

    print("üü¢ Shipment Bot is running with daily CSV export...")
    app.run_polling()
